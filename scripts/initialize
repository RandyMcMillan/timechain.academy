#!/usr/bin/env bash
function report() {
#ENV VARS
OS=$(uname)
OS_VERSION=$(uname -r)
UNAME_M=$(uname -m)
ARCH=$(uname -m)
export OS
export OS_VERSION
export UNAME_M
export ARCH
echo OS:
echo "$OS" | awk '{print tolower($0)}'
echo OS_VERSION:
echo "$OS_VERSION" | awk '{print tolower($0)}'
echo UNAME_M:
echo "$UNAME_M" | awk '{print tolower($0)}'
echo ARCH:
echo "$ARCH" | awk '{print tolower($0)}'
echo OSTYPE:
echo "$OSTYPE" | awk '{print tolower($0)}'
}
function checkbrew() {
    if hash brew 2>/dev/null; then
        if ! hash "$AWK" 2>/dev/null; then
            brew install "$AWK"
        fi
        if ! hash git 2>/dev/null; then
            brew install git
        fi
        if ! hash node 2>/dev/null; then
            brew install node@14
						brew link --overwrite node@14
				else
						npm install gulp gulp-watch q
        fi

				#brew install node@14 # we are using nvm - clean your host clean of nodeJS
				checknvm

    else

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        checkbrew
    fi
}
function checknvm() {
    if hash brew 2>/dev/null; then
        if ! hash nvm 2>/dev/null; then
            brew install nvm #yarn
        fi
        if ! hash curl 2>/dev/null; then
            brew install curl
        fi
    else

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh)"
				checknvm

    fi
}
function checkraspi(){
    echo 'Checking Raspi'
    if [ -e /etc/rpi-issue ]; then
    echo "- Original Installation"
    cat /etc/rpi-issue
    fi
    if [ -e /usr/bin/lsb_release ]; then
    echo "- Current OS"
    lsb_release -irdc
    fi
    echo "- Kernel"
    uname -r
    echo "- Model"
    cat /proc/device-tree/model && echo
    echo "- hostname"
    hostname
    echo "- Firmware"
    /opt/vc/bin/vcgencmd version
}
if [[ "$OSTYPE" == "linux"* ]]; then
    #CHECK APT
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        PACKAGE_MANAGER=apt
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        export AWK
        if hash apt 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
    if [[ "$OSTYPE" == "linux-musl" ]]; then
        PACKAGE_MANAGER=apk
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        export AWK
        if hash apk 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
    if [[ "$OSTYPE" == "linux-arm"* ]]; then
        PACKAGE_MANAGER=apt
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        echo $AWK
        export AWK
        checkraspi
        if hash apt 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
        report
        PACKAGE_MANAGER=brew
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK="awk"
        export AWK
        #checkbrew
        # checknvm
elif [[ "$OSTYPE" == "cygwin" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "msys" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "win32" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo TODO add support for "$OSTYPE"
else
    echo TODO add support for "$OSTYPE"
fi
source ~/.bashrc
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm


function npm-installs(){

node -v
npm -v

# nvm alias 14 12
#npm install gulp
npm install -g --default --force gulp
npm install -g node-gyp
#npm install -g node-gyp@1
#npm install -g node-gyp@2
#npm install -g node-gyp@3
#npm install -g node-gyp@4
#npm install -g node-gyp@5
#npm install -g node-gyp@6
#npm install -g node-gyp@7

#npm install -g fs
#npm install -g fs/promises
cd ./node_modules && npm install -g --default https://github.com/timechain-academy/fs.promises.git && cd ..
#nvm alias fs.promises fs
#cd node_modules &&  ln -s fs.promises/ fs-promises && cd ..
#npm install -g fs.promises
#npm install -g https://github.com/timechain-academy/fs-xattr.git
#npm install -g fs-xattr
#npm install -g fs-xattr@0.1
#npm install -g fs-xattr@0.2
#npm install -g fs-xattr@0.3
npm install -g --default https://github.com/timechain-academy/fs-xattr.git
#npm install -g --default fs-xattr@0.4.0
#nvm alias fs-xattr@0.1.17 fs-xattr@0.4.0
if [[ "$OSTYPE" == "darwin"* ]]; then
#npm clean-install -g fs-xattr@0.1.17 fsevents@2.3.2
npm install -s --default fsevents@2.3.2
#nvm alias fsevents@2.3.2 fsevents@1.2.13
fi
#npm install -g electron
#npm install -g electron@8
#npm install -g electron@9
#npm install -g electron@10
#npm install -s --default electron@11.0.0-beta.18
npm install electron@13.0.0
#npm install -g electron@11.0.0
#npm install -g electron@11
#npm install -g @electron/asar @electron/osx-sign
#nvm alias @electron/asar asar@3.2.0 

#npm install -g @mapbox/node-pre-gyp

#npm install -g electron-builder
#npm install -g electron-builder@19
#npm install -g electron-builder@20
#npm install -g electron-builder@21
#npm install -g electron-builder@22
#npm install -g electron-builder@23
##npm install -g app-builder-lib@20.44.4
#npm install -g app-builder-lib


#npm install -g --default knex
#npm install -g knex@0.21.0
#npm install -g --default --legacy-peer-deps knex-on-conflict-do-nothing@1.0.0
#npm install -g --default --force knex@0.21.0
#npm install -g --default --force knex-on-conflict-do-nothing@1.0.0

#npm install -g sqlite3
#npm install -g sqlite3@4
#npm install sqlite3@4.1.0
npm install -g --default sqlite3@5.0.0
#npm install -g sqlite3@5.1.2

#npm install -g --default fs
#npm install -g fs/promises
#npm install -g fs.promises
#npm install -g https://github.com/timechain-academy/fs-xattr.git
#npm install -g fs-xattr
#npm install -g fs-xattr@0.1
#npm install -g fs-xattr@0.2
#npm install -g fs-xattr@0.3
#npm install -g fs-xattr@0.4.0
#nvm alias fs-xattr@0.1.17 fs-xattr@0.3.0
#nvm alias fs-xattr@0.1.17 fs-xattr@0.4.0
#npm clean-install -g fs-xattr@0.1.17 fsevents@2.3.2

#npm install --ignore-scripts  https://github.com/timechain-academy/node-appdmg#dda1cc89d9ce9b00cec76ee9399772b0d5d4ecd3
npm install https://github.com/timechain-academy/node-appdmg#dda1cc89d9ce9b00cec76ee9399772b0d5d4ecd3

#install ./node_modules/fs-xattr node_modules/appdmg/node_modules/

#npm install -g cross-spawn
#npm install -g cross-spawn-async
#npm install -g cross-spawn-async@1
#npm install -g cross-spawn-async@2
#npm install -g cross-spawn-async@2.1
#npm install -g cross-spawn-async@2.2.5
#nvm alias c-g ross-spawn cross-spawn-async@2.2.5

}

function build-sequence(){

npm rebuild

}

#nvm environment config
nvm install 14 && nvm use 14
#nvm --default install-latest-npm

#npm install -g --default --force gulp-cli
npm-installs
