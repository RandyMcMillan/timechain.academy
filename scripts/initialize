#!/usr/bin/env bash
report() {
#ENV VARS
OS=$(uname)
OS_VERSION=$(uname -r)
UNAME_M=$(uname -m)
ARCH=$(uname -m)
export OS
export OS_VERSION
export UNAME_M
export ARCH
echo OS:
echo "$OS" | awk '{print tolower($0)}'
echo OS_VERSION:
echo "$OS_VERSION" | awk '{print tolower($0)}'
echo UNAME_M:
echo "$UNAME_M" | awk '{print tolower($0)}'
echo ARCH:
echo "$ARCH" | awk '{print tolower($0)}'
echo OSTYPE:
echo "$OSTYPE" | awk '{print tolower($0)}'
}




npm-installs(){

node -v
npm -v

npm install -D @types/node@18.11.9
npm install -D @npmcli/fs

#nvm alias
#nvm alias <name> <version> Set an alias named <name> pointing to <version>

#npm install alias
#npm install -h
#npm install <alias>@npm:<name>

npm install electron-builder@23.0.2
npm install electron-updater@5.0.0
npm install electron@13.0.0
npm install mkdirp@0.5.1

npm install https://github.com/timechain-academy/beaker-virtual-fs.git
npm install https://github.com/timechain-academy/builtin-pages-lib.git#b23ed29856324d6036bc08bc19d653d98de52003

echo "macOS_Catalina_acid_test.sh"
curl -sL https://github.com/nodejs/node-gyp/raw/main/macOS_Catalina_acid_test.sh | bash
echo "macOS_Catalina_acid_test.sh"
##npm install node-pre-gyp
npm install gulp
npm install gulp-cli@^2.3.0
##npm install node-gyp
###sqlite3@"^4.1.0
#npm install <alias>@npm:<name>
##npm install sqlite3@4.1.0@npm:sqlite3@5.1.2
##npm install sqlite3@4.2.0@npm:sqlite3@5.1.2
##
###npm install knex-on-conflict-do-nothing@1.0.0
##npm install knex@^2@npm:knex@2.3.0
##npm install knex-on-conflict-do-nothing@1.0.0
##
##npm install winston
##npm install isbinaryfile
##npm install app-builder-lib
##npm install electron-builder
##npm install @npmcli/fs@3.1.0
##npm install macos-alias@0.1
##
##npm install -g fs
#npm install <alias>@npm:<name>
##npm install -g fs/promises
#npm install --default https://github.com/timechain-academy/fs.promises.git && cd ..
#npm install fs.promises@npm:fs/promises

#nvm alias fs/promises  fs.promises


#npm install <alias>@npm:<name>
###cd node_modules &&  ln -s fs.promises/ fs-promises && cd ..
###npm install -g fs.promises
##
###fs-xattr@0.1.17
##
##npm install npm@8
###npm install --force fs-xattr
#npm install <alias>@npm:<name>
###npm install fs-xattr@0.4.0
##npm install fs-xattr@0.1.17
###npm install fs-xattr@0.3.1
###npm install --force fs-xattr@0.4.0?
###npm install fs-xattr@0.4.0
#npm install <alias>@npm:<name>
###nvm alias fs-xattr@0.1.17 fs-xattr@0.4.0

}

################################################################################
build-sequence(){

npm rebuild

}

###############################################################################
checkbrew() {
    if hash brew 2>/dev/null; then
        if ! hash "$AWK" 2>/dev/null; then
            brew install "$AWK"
        fi
        if ! hash git 2>/dev/null; then
            brew install git
        fi
        #if ! hash node 2>/dev/null; then
            brew install node@14 yarn
						brew link --overwrite node@14
						#npm install npm@6 #npm@8
				#else
						#echo
						#npm install npm@6 #npm@8
						#npm install gulp gulp-watch q
        #fi
				checknvm

    else

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        checkbrew
    fi
}
################################################################################
checknvm() {
    if hash brew 2>/dev/null; then
        if ! hash curl 2>/dev/null; then
            brew install curl
        fi
        if ! hash nvm 2>/dev/null; then
						echo
            #brew install nvm #yarn
        fi
    else

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh)"
				checknvm

    fi
}
################################################################################
checkraspi(){
    echo 'Checking Raspi'
    if [ -e /etc/rpi-issue ]; then
    echo "- Original Installation"
    cat /etc/rpi-issue
    fi
    if [ -e /usr/bin/lsb_release ]; then
    echo "- Current OS"
    lsb_release -irdc
    fi
    echo "- Kernel"
    uname -r
    echo "- Model"
    cat /proc/device-tree/model && echo
    echo "- hostname"
    hostname
    echo "- Firmware"
    /opt/vc/bin/vcgencmd version
}
if [[ "$OSTYPE" == "linux"* ]]; then
    #CHECK APT
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        PACKAGE_MANAGER=apt
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        export AWK
        if hash apt 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
    if [[ "$OSTYPE" == "linux-musl" ]]; then
        PACKAGE_MANAGER=apk
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        export AWK
        if hash apk 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
    if [[ "$OSTYPE" == "linux-arm"* ]]; then
        PACKAGE_MANAGER=apt
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        echo $AWK
        export AWK
        checkraspi
        if hash apt 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
        report
        PACKAGE_MANAGER=brew
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK="awk"
        export AWK
        checkbrew
        # checknvm
elif [[ "$OSTYPE" == "cygwin" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "msys" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "win32" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo TODO add support for "$OSTYPE"
else
    echo TODO add support for "$OSTYPE"
fi
source ~/.bashrc
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm



################################################################################
############################
#checkbrew
source nodecheck.sh
nodecheck

################################################################################
NODE_VERSION_CHECK=$(node -e "const v = process.version.match(/(\\d+)\.(\\d+)\.(\\d+)/).slice(1).map(_ => parseInt(_)); console.log(v[0] >= 13 || (v[0] >= 12 && v[1] >= 22 && v[2] >= 12))")
if $NODE_VERSION_CHECK -eq "true" ;
then
    echo "NodeJS is at least 12.22.12"
		echo $NODE_VERSION_CHECK
fi

################################################################################
function doit(){
#nvm environment config
nvm install $NODE_VERSION
nvm use $NODE_VERSION
npm install
npm-installs
}

################################################################################
if [ "$(whoami)" != "runner" ]; then
echo "Try:"
echo "source ~/.bashrc"
echo "if nvm command not available..."
doit
else
export NVM_DIR="/home/runner/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
sudo doit
fi

################################################################################
